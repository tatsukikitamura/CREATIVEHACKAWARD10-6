<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="csrf-token" content="<%= form_authenticity_token %>">
  <title>AI診断結果 - MBTI診断</title>
  <%= stylesheet_link_tag 'mbti_result', 'data-turbo-track': 'reload' %>
  <style>
    .ai-header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 2rem;
      text-align: center;
      border-radius: 15px;
      margin-bottom: 2rem;
      box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
    }
    
    .ai-icon {
      font-size: 3rem;
      margin-bottom: 1rem;
      display: block;
    }
    
    .ai-title {
      font-size: 2.5rem;
      margin-bottom: 0.5rem;
      font-weight: bold;
    }
    
    .ai-subtitle {
      font-size: 1.2rem;
      opacity: 0.9;
    }
    
    .ai-analysis-section {
      background: white;
      border-radius: 15px;
      padding: 2rem;
      margin-bottom: 2rem;
      box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
      border-left: 5px solid #667eea;
    }
    
    .analysis-title {
      font-size: 1.8rem;
      color: #333;
      margin-bottom: 1.5rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .analysis-content {
      font-size: 1.1rem;
      line-height: 1.8;
      color: #555;
      white-space: pre-wrap;
    }
    
    .mbti-type-display {
      background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
      color: white;
      padding: 1.5rem;
      border-radius: 10px;
      text-align: center;
      margin-bottom: 2rem;
    }
    
    .mbti-type {
      font-size: 2.5rem;
      font-weight: bold;
      margin-bottom: 0.5rem;
    }
    
    .mbti-description {
      font-size: 1.2rem;
      opacity: 0.9;
    }
    
    .back-button {
      background: #667eea;
      color: white;
      padding: 1rem 2rem;
      border: none;
      border-radius: 10px;
      font-size: 1.1rem;
      cursor: pointer;
      transition: all 0.3s ease;
      text-decoration: none;
      display: inline-block;
      margin-top: 2rem;
    }
    
    .back-button:hover {
      background: #5a6fd8;
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
    }
    
    .loading-spinner {
      display: inline-block;
      width: 20px;
      height: 20px;
      border: 3px solid #f3f3f3;
      border-top: 3px solid #667eea;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-right: 10px;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .error-message {
      background: #fee;
      color: #c33;
      padding: 1rem;
      border-radius: 10px;
      border-left: 5px solid #c33;
      margin: 1rem 0;
    }
    
    /* 音楽セクションのスタイル */
    .music-content {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
      margin-bottom: 2rem;
    }
    
    .music-section {
      background: #f8f9fa;
      padding: 1.5rem;
      border-radius: 10px;
      border-left: 4px solid #667eea;
    }
    
    .music-section h4 {
      color: #333;
      margin-bottom: 1rem;
      font-size: 1.3rem;
    }
    
    .music-list {
      list-style: none;
      padding: 0;
    }
    
    .music-list li {
      background: white;
      padding: 0.8rem;
      margin-bottom: 0.5rem;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      transition: transform 0.2s ease;
    }
    
    .music-list li:hover {
      transform: translateY(-2px);
    }
    
    .playlist-section {
      margin-top: 2rem;
    }
    
    .playlist-card {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 2rem;
      border-radius: 15px;
      box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
    }
    
    .playlist-card h5 {
      font-size: 1.5rem;
      margin-bottom: 1rem;
    }
    
    .playlist-songs {
      margin-top: 1rem;
    }
    
    .song-item {
      background: rgba(255, 255, 255, 0.2);
      padding: 0.8rem;
      margin-bottom: 0.5rem;
      border-radius: 8px;
      backdrop-filter: blur(10px);
    }
    
    /* 音楽プレースホルダーのスタイル */
    .music-placeholder {
      background: #f8f9fa;
      border: 2px dashed #667eea;
      border-radius: 15px;
      padding: 3rem;
      text-align: center;
      margin: 2rem 0;
      transition: all 0.3s ease;
    }
    
    .music-placeholder:hover {
      border-color: #5a6fd8;
      background: #f0f2ff;
    }
    
    /* 画像ギャラリーのスタイル */
    .image-gallery {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
    }
    
    .image-card {
      background: white;
      border-radius: 15px;
      padding: 1.5rem;
      box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
      text-align: center;
    }
    
    .image-card h4 {
      color: #333;
      margin-bottom: 0.5rem;
    }
    
    .image-card p {
      color: #666;
      margin-bottom: 1rem;
      font-size: 0.9rem;
    }
    
    .image-placeholder {
      background: #f8f9fa;
      border: 2px dashed #ddd;
      border-radius: 10px;
      padding: 2rem;
      text-align: center;
      min-height: 200px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
    }
    
    .image-placeholder img {
      max-width: 100%;
      max-height: 300px;
      border-radius: 10px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }
    
    .generate-btn {
      background: #667eea;
      color: white;
      border: none;
      padding: 0.8rem 1.5rem;
      border-radius: 8px;
      cursor: pointer;
      font-size: 1rem;
      margin-top: 1rem;
      transition: all 0.3s ease;
    }
    
    .generate-btn:hover {
      background: #5a6fd8;
      transform: translateY(-2px);
    }
    
    .generate-btn:disabled {
      background: #ccc;
      cursor: not-allowed;
      transform: none;
    }
  </style>
</head>
<body>
    <div class="ai-header">
      <h1 class="ai-title">AI診断結果</h1>
      <p class="ai-subtitle">人工知能による詳細な性格分析</p>
    </div>

    <!-- ゲームマスターの結果がある場合の表示 -->
    <% if @mbti_session.story_mode == 'game_master' && @achievement.present? %>
      <div class="ai-analysis-section">
        <h3 class="analysis-title">
          <span>🏆</span>
          物語の結末
        </h3>
        <div class="analysis-content">
          <p><strong><%= @achievement %></strong></p>
          <% if @ending_text.present? %>
            <br>
            <p><%= simple_format(@ending_text) %></p>
          <% end %>
        </div>
      </div>

      <% if @mbti_analysis.present? || @personality_insights.present? %>
        <div class="ai-analysis-section">
          <h3 class="analysis-title">
            <span>🎭</span>
            物語からの性格分析
          </h3>
          <div class="analysis-content">
            <% if @mbti_analysis.present? %>
              <p><strong>📊 MBTI分析</strong></p>
              <p><%= @mbti_analysis %></p>
            <% end %>
            <% if @personality_insights.present? %>
              <br>
              <p><strong>🔍 性格の洞察</strong></p>
              <p><%= @personality_insights %></p>
            <% end %>
          </div>
        </div>
      <% end %>
    <% end %>

    <div class="mbti-type-display">
      <h2 class="mbti-type"><%= @result.mbti_type %></h2>
      <p class="mbti-description"><%= @result.description %></p>
    </div>

    <!-- 音楽提案セクション -->
    
      <h3 class="analysis-title">
        <span>🎵</span>
        あなたに合う音楽
      </h3>
      
      <div  id="music-content">
        <button class="generate-btn" onclick="generateMusic()">
          音楽を生成
        </button>
      </div>
      <br>
      <br>
  
    

    <!-- 画像生成セクション -->
    <div class="image-section">
      <h3 class="analysis-title">
        <span>🎨</span>
        あなたに合う画像
      </h3>
      
      <div class="image-gallery">
        <div class="image-card">
          <h4>抽象的な表現</h4>
          <p>あなたの性格を抽象的なアートで表現します</p>
          <div class="image-placeholder" id="image-abstract">
            <button class="generate-btn" onclick="generateImage('abstract', 0)">
              画像を生成
            </button>
          </div>
        </div>
        
        <div class="image-card">
          <h4>自然・風景での表現</h4>
          <p>あなたの性格を自然や風景で表現します</p>
          <div class="image-placeholder" id="image-nature">
            <button class="generate-btn" onclick="generateImage('nature', 1)">
              画像を生成
            </button>
          </div>
        </div>
        
        <div class="image-card">
          <h4>日常シーンでの表現</h4>
          <p>あなたの性格を日常のシーンで表現します</p>
          <div class="image-placeholder" id="image-daily">
            <button class="generate-btn" onclick="generateImage('daily', 2)">
              画像を生成
            </button>
          </div>
        </div>
      </div>
    </div>

    <div style="text-align: center;">
      <% if @mbti_session.story_mode == 'game_master' %>
        <a href="<%= mbti_game_master_ending_path %>?session_id=<%= @mbti_session.session_id %>" class="back-button">
          ← 物語の結末に戻る
        </a>
      <% else %>
        <a href="<%= mbti_result_path %>?session_id=<%= @mbti_session.session_id %>" class="back-button">
          ← 通常の結果に戻る
        </a>
      <% end %>
    </div>
  

  <script>
    // ページ読み込み時のアニメーション
    document.addEventListener('DOMContentLoaded', function() {
      const sections = document.querySelectorAll('.ai-analysis-section');
      sections.forEach((section, index) => {
        section.style.opacity = '0';
        section.style.transform = 'translateY(20px)';
        setTimeout(() => {
          section.style.transition = 'all 0.6s ease';
          section.style.opacity = '1';
          section.style.transform = 'translateY(0)';
        }, index * 200);
      });
    });

    // 画像生成関数
    async function generateImage(category, index) {
      const placeholder = document.getElementById(`image-${category}`);
      
      // ローディング表示に切り替え
      placeholder.innerHTML = `
        <div class="loading-spinner"></div>
        <p>画像を生成中...</p>
      `;
      
      try {
        // カテゴリに応じたプロンプトを生成
        const prompt = await generateImagePrompt(category);
        
        const response = await fetch('/mbti/generate_image', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
          },
          body: JSON.stringify({ prompt: prompt })
        });
        
        if (!response.ok) {
          throw new Error('画像生成に失敗しました');
        }
        
        const data = await response.json();
        
        if (data.image_url) {
          // 画像を表示
          placeholder.innerHTML = `
            <img src="${data.image_url}" alt="Generated image" />
          `;
        } else {
          throw new Error('画像URLが取得できませんでした');
        }
      } catch (error) {
        console.error('Image generation error:', error);
        placeholder.innerHTML = `
          <div style="color: #c33; text-align: center;">
            <p>❌ 画像生成に失敗しました</p>
            <p style="font-size: 0.9rem; margin-top: 0.5rem;">${error.message}</p>
            <button class="generate-btn" onclick="generateImage('${category}', ${index})">
              再試行
            </button>
          </div>
        `;
      }
    }

    // カテゴリに応じた画像プロンプトを生成
    async function generateImagePrompt(category) {
      const mbtiType = '<%= @result.mbti_type %>';
      const description = '<%= @result.description %>';
      const storyMode = '<%= @mbti_session.story_mode %>';
      const customStory = <%= raw @mbti_session.custom_story&.to_json || 'null' %>;
      const answers = <%= raw @answers.to_json %>;
      
      // 回答履歴から物語の文脈を構築
      const storyContext = buildStoryContext(answers, storyMode, customStory);
      
      const categoryPrompts = {
        'abstract': `Create an abstract artistic representation based on this story context: ${storyContext}. MBTI Type: ${mbtiType} (${description}). Use abstract shapes, colors, and forms to represent the personality traits and story elements. Art style: modern abstract art, vibrant colors, geometric and organic shapes that reflect the story atmosphere.`,
        'nature': `Create a natural landscape or scene based on this story context: ${storyContext}. MBTI Type: ${mbtiType} (${description}). Show a beautiful natural environment that reflects both the personality traits and the story setting - could be mountains, forests, oceans, or other natural settings that match the story atmosphere. Art style: realistic nature photography style.`,
        'daily': `Create a daily life scene based on this story context: ${storyContext}. MBTI Type: ${mbtiType} (${description}). Show a realistic everyday situation or activity that would be typical for someone with these personality traits in this story setting. Art style: realistic lifestyle photography.`
      };
      
      return categoryPrompts[category] || categoryPrompts['abstract'];
    }

    // 回答履歴から物語の文脈を構築
    function buildStoryContext(answers, storyMode, customStory) {
      let context = "";
      
      // 物語モードに応じた設定
      const storySettings = {
        'horror': {
          atmosphere: 'ホラー・スリラー',
          setting: '暗い夜道、古い屋敷、謎めいた出来事',
          tone: '緊張感と恐怖感のある状況'
        },
        'adventure': {
          atmosphere: 'アドベンチャー・冒険',
          setting: '未知の土地、宝物探し、危険な挑戦',
          tone: 'エキサイティングで冒険的な状況'
        },
        'mystery': {
          atmosphere: 'ミステリー・推理',
          setting: '謎めいた事件、隠された真実、複雑な人間関係',
          tone: '推理と分析が必要な状況'
        },
        'creator': {
          atmosphere: customStory?.mood || 'ドラマチック',
          setting: customStory?.setting || '未知の世界',
          tone: customStory?.theme || '冒険的な状況',
          character: customStory?.character_background
        }
      };
      
      const story = storySettings[storyMode] || storySettings['adventure'];
      
      // 物語の基本設定
      context += `Story Setting: ${story.setting}. Atmosphere: ${story.atmosphere}. Tone: ${story.tone}.`;
      
      if (story.character) {
        context += ` Character Background: ${story.character}.`;
      }
      
      // 回答履歴から物語の流れを構築
      if (answers && answers.length > 0) {
        context += " Story Journey: ";
        answers.forEach((answer, index) => {
          if (answer && answer.question && answer.choice) {
            const choiceText = answer.choice === 'A' ? answer.optionA : answer.optionB;
            context += `In situation ${index + 1} (${answer.question}), the character chose: ${choiceText}. `;
          }
        });
      }
      
      return context;
    }

    // 音楽生成関数
    async function generateMusic() {
      const placeholder = document.getElementById('music-content');
      
      // ローディング表示
      placeholder.innerHTML = `
        <div style="text-align: center; padding: 2rem;">
          <div style="display: inline-block; width: 40px; height: 40px; border: 4px solid #f3f3f3; border-top: 4px solid #3498db; border-radius: 50%; animation: spin 1s linear infinite;"></div>
          <p style="margin-top: 1rem; color: #666;">音楽を生成中...</p>
        </div>
      `;
      
      try {
        const response = await fetch('/mbti/generate_music', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
          },
          body: JSON.stringify({
            session_id: '<%= @mbti_session.session_id %>'
          })
        });
        
        if (!response.ok) {
          throw new Error('音楽生成に失敗しました');
        }
        
        const data = await response.json();
        
        if (data.music_recommendations || data.playlist_info) {
          // 音楽コンテンツを表示
          let musicHtml = '<div class="music-content">';
          
          if (data.music_recommendations) {
            if (data.music_recommendations.genres && data.music_recommendations.genres.length > 0) {
              musicHtml += `
                <div class="music-section">
                  <h4>🎶 おすすめジャンル</h4>
                  <ul class="music-list">
                    ${data.music_recommendations.genres.map(genre => `<li>${genre}</li>`).join('')}
                  </ul>
                </div>
              `;
            }
            
            if (data.music_recommendations.artists && data.music_recommendations.artists.length > 0) {
              musicHtml += `
                <div class="music-section">
                  <h4>🎤 おすすめアーティスト</h4>
                  <ul class="music-list">
                    ${data.music_recommendations.artists.map(artist => `<li>${artist}</li>`).join('')}
                  </ul>
                </div>
              `;
            }
            
            if (data.music_recommendations.songs && data.music_recommendations.songs.length > 0) {
              musicHtml += `
                <div class="music-section">
                  <h4>🎼 おすすめ楽曲</h4>
                  <ul class="music-list">
                    ${data.music_recommendations.songs.map(song => `<li>${song}</li>`).join('')}
                  </ul>
                </div>
              `;
            }
          }
          
          if (data.playlist_info) {
            musicHtml += `
              <div class="playlist-section">
                <h3>🎧 あなた専用プレイリスト</h3>
                <br>
                <div class="playlist-card">
                  <h5>${data.playlist_info.title}</h5>
                  <p>${data.playlist_info.description}</p>
                  <div class="playlist-songs">
                    ${data.playlist_info.songs ? data.playlist_info.songs.map(song => `<div class="song-item">🎵 ${song}</div>`).join('') : ''}
                  </div>
                </div>
              </div>
            `;
          }
          
          musicHtml += '</div>';
          placeholder.innerHTML = musicHtml;
        } else {
          throw new Error('音楽データが取得できませんでした');
        }
      } catch (error) {
        console.error('Music generation error:', error);
        placeholder.innerHTML = `
          <div style="color: #c33; text-align: center;">
            <p>❌ 音楽生成に失敗しました</p>
            <p style="font-size: 0.9rem; margin-top: 0.5rem;">${error.message}</p>
            <button class="generate-btn" onclick="generateMusic()">
              再試行
            </button>
          </div>
        `;
      }
    }



    // 音楽プレイリストの再生（デモ用）
    function playPlaylist() {
      alert('音楽プレイリストの再生機能は、実際の音楽サービスとの連携が必要です。\n\nおすすめの楽曲を音楽アプリで検索してみてください！');
    }
  </script>
</body>
</html>
