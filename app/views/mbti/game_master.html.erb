<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AIゲームマスター - MBTI診断</title>
  <%= stylesheet_link_tag 'mbti_common', 'data-turbo-track': 'reload' %>
  <%= stylesheet_link_tag 'mbti_game_master', 'data-turbo-track': 'reload' %>
  <%= stylesheet_link_tag 'mbti_themes', 'data-turbo-track': 'reload' %>
  <%= stylesheet_link_tag 'footer', 'data-turbo-track': 'reload' %>
</head>
<body class="theme-<%= @ui_theme %>">
  <div class="game-master-container">
    <!-- ヘッダー -->
    <div class="game-header">
      <div class="story-progress">
        <div class="progress-bar">
          <div class="progress-fill" style="width: <%= @progress %>%"></div>
        </div>
        <div class="progress-text">進捗: <%= @progress %>%</div>
      </div>
    </div>

    <!-- メインコンテンツエリア（1200px以上で一列表示） -->
    <div class="main-content-area">
      <!-- 質問文と選択肢を一つの列にまとめる -->
      <div class="story-choices-section">
        <h3><%= @scene_text %></h3>
        
        <div class="choices-container">
          <h3 class="choices-title">あなたの選択</h3>
          <%= form_with url: mbti_game_master_answer_path, method: :post, local: true, class: "choices-form", data: { turbo: false } do |form| %>
            <%= form.hidden_field :session_id, value: @mbti_session.session_id %>
            <%= form.hidden_field :question_dimension, value: @question_dimension %>
            
            <div class="choices-grid">
              <% @choices.each_with_index do |choice, index| %>
                <div class="choice-item">
                  <%= form.radio_button :choice_value, choice['value'], 
                      id: "choice_#{index}", 
                      class: "choice-radio",
                      required: true %>
                  <%= form.label "choice_value_#{choice['value']}", 
                      choice['text'], 
                      for: "choice_#{index}",
                      class: "choice-label" %>
                  <%= form.hidden_field :progress_impact, value: choice['progress_impact'] %>
                  <%= form.hidden_field :choice_text, value: choice['text'], id: "choice_text_#{index}" %>
                </div>
              <% end %>
            </div>
            
            <!-- 自動送信のため、submitボタンは非表示 -->
            <div class="submit-container" style="display: none;">
              <%= form.submit "選択する", class: "submit-button" %>
            </div>
          <% end %>
        </div>
      </div>
    </div>

    <!-- サイドバー -->
    <div class="game-sidebar">
      <div class="inventory-section">
        <h3>🎒 持ち物</h3>
        <% if @inventory.any? %>
          <ul class="inventory-list">
            <% @inventory.each do |item| %>
              <li class="inventory-item"><%= item %></li>
            <% end %>
          </ul>
        <% else %>
          <p class="empty-inventory">まだ何も持っていません</p>
        <% end %>
      </div>

      <div class="story-info">
        <h3>📖 物語情報</h3>
        <div class="info-item">
          <strong>🎯 目標:</strong> <%= @goal %>
        </div>
        <div class="info-item">
          <strong>次元:</strong> <%= @question_dimension %>
        </div>
        <div class="info-item">
          <strong>モード:</strong> <%= @mbti_session.story_mode&.capitalize || 'Adventure' %>
        </div>
        
        <!-- デスクトップ版のホームボタン（物語情報の下） -->
        <div class="home-button-container desktop-only">
          <a href="<%= mbti_path %>" class="home-button">🏠 ホームに戻る</a>
        </div>
      </div>
    </div>
    
    <!-- モバイル版のホームボタン（コンテナの下） -->
    <div class="home-button-container mobile-only">
      <a href="<%= mbti_path %>" class="home-button">🏠 ホームに戻る</a>
    </div>
  </div>

  <script>
    // 選択肢のアニメーション
    document.addEventListener('DOMContentLoaded', function() {
      const body = document.body;
      const questionElement = document.querySelector('.scene-text');
      const questionText = questionElement.textContent;
      const currentTheme = body.className.match(/theme-(\w+)/);
      
      // 質問の内容に基づいて追加のUI調整を行う
      if (currentTheme) {
        adjustUIForQuestionContent(questionText, currentTheme[1]);
      }

      const choiceItems = document.querySelectorAll('.choice-item');
      choiceItems.forEach((item, index) => {
        item.style.opacity = '0';
        item.style.transform = 'translateY(20px)';
        setTimeout(() => {
          item.style.transition = 'all 0.3s ease';
          item.style.opacity = '1';
          item.style.transform = 'translateY(0)';
        }, index * 100);
      });

      // プログレスバーのアニメーション
      const progressFill = document.querySelector('.progress-fill');
      const targetWidth = progressFill.style.width;
      progressFill.style.width = '0%';
      setTimeout(() => {
        progressFill.style.transition = 'width 1s ease';
        progressFill.style.width = targetWidth;
      }, 500);

      // ページ読み込み時のテーマ別エフェクト
      initializeThemeEffects();
    });

    // 選択肢のクリック処理
    function updateSelection() {
      // 全ての選択肢からselectedクラスを削除
      document.querySelectorAll('.choice-item').forEach(item => {
        item.classList.remove('selected');
      });
      
      // 選択された選択肢にselectedクラスを追加
      const checkedRadio = document.querySelector('.choice-radio:checked');
      if (checkedRadio) {
        checkedRadio.parentElement.classList.add('selected');
      }
    }

    // ラジオボタンの変更イベント（自動送信機能付き）
    document.querySelectorAll('.choice-radio').forEach(radio => {
      radio.addEventListener('change', function() {
        updateSelection();
        
        // 選択肢を無効化してローディング状態を表示
        const choiceItems = document.querySelectorAll('.choice-item');
        choiceItems.forEach(item => {
          item.style.opacity = '0.6';
          item.style.pointerEvents = 'none';
        });
        
        // 選択された選択肢にローディング表示
        const selectedItem = this.parentElement;
        const loadingDiv = document.createElement('div');
        loadingDiv.className = 'loading-indicator';
        loadingDiv.textContent = '送信中...';
        selectedItem.appendChild(loadingDiv);
        
        // 選択後、少し遅延してから自動送信
        setTimeout(() => {
          const form = this.closest('form');
          if (form) {
            // 選択された選択肢のテキストを設定
            const selectedChoiceText = this.parentElement.querySelector('.choice-label').textContent;
            const choiceTextInput = this.parentElement.querySelector('input[name="choice_text"]');
            if (choiceTextInput) {
              choiceTextInput.value = selectedChoiceText;
            }
            
            console.log('Submitting form...');
            // 直接フォームを送信
            form.submit();
          } else {
            console.error('Form not found');
          }
        }, 500); // 0.5秒の遅延でユーザーに選択を確認させる
      });
    });

    // ラベルのクリックイベント（自動送信機能付き）
    document.querySelectorAll('.choice-label').forEach(label => {
      label.addEventListener('click', function(e) {
        e.preventDefault();
        const radio = this.previousElementSibling;
        if (radio && radio.type === 'radio') {
          radio.checked = true;
          updateSelection();
          
          // 選択肢を無効化してローディング状態を表示
          const choiceItems = document.querySelectorAll('.choice-item');
          choiceItems.forEach(item => {
            item.style.opacity = '0.6';
            item.style.pointerEvents = 'none';
          });
          
          // 選択された選択肢にローディング表示
          const selectedItem = radio.parentElement;
          const loadingDiv = document.createElement('div');
          loadingDiv.className = 'loading-indicator';
          loadingDiv.textContent = '送信中...';
          selectedItem.appendChild(loadingDiv);
          
          // 選択後、少し遅延してから自動送信
          setTimeout(() => {
            const form = radio.closest('form');
            if (form) {
              // 選択された選択肢のテキストを設定
              const selectedChoiceText = this.textContent;
              const choiceTextInput = radio.parentElement.querySelector('input[name="choice_text"]');
              if (choiceTextInput) {
                choiceTextInput.value = selectedChoiceText;
              }
              
              console.log('Submitting form from label click...');
              // 直接フォームを送信
              form.submit();
            } else {
              console.error('Form not found from label click');
            }
          }, 500); // 0.5秒の遅延でユーザーに選択を確認させる
        }
      });
    });

    // 選択肢のホバー効果
    document.querySelectorAll('.choice-label').forEach(label => {
      label.addEventListener('mouseenter', function() {
        this.parentElement.classList.add('hovered');
      });
      
      label.addEventListener('mouseleave', function() {
        this.parentElement.classList.remove('hovered');
      });
    });

    // 質問内容に基づくUI調整関数
    function adjustUIForQuestionContent(questionText, theme) {
      // 質問のキーワードに基づいて追加の調整
      if (questionText.includes('人') || questionText.includes('交流') || questionText.includes('会話')) {
        // 社会的な質問の場合
        addSocialEffects(theme);
      } else if (questionText.includes('考え') || questionText.includes('分析') || questionText.includes('論理')) {
        // 思考的な質問の場合
        addThinkingEffects(theme);
      } else if (questionText.includes('感情') || questionText.includes('気持ち') || questionText.includes('感じ')) {
        // 感情的な質問の場合
        addEmotionalEffects(theme);
      } else if (questionText.includes('計画') || questionText.includes('整理') || questionText.includes('構造')) {
        // 構造的な質問の場合
        addStructuralEffects(theme);
      }
    }

    // テーマ別の追加エフェクト
    function addSocialEffects(theme) {
      if (theme === 'dynamic') {
        // より活発なアニメーション
        document.body.style.animation = 'pulse-dynamic 2s infinite';
      }
    }

    function addThinkingEffects(theme) {
      if (theme === 'analytical') {
        // より冷静なアニメーション
        // 質問文のサイズ変更は削除
      }
    }

    function addEmotionalEffects(theme) {
      if (theme === 'emotional') {
        // より温かみのあるエフェクト
        document.body.style.boxShadow = '0 20px 40px rgba(253, 121, 168, 0.2)';
      }
    }

    function addStructuralEffects(theme) {
      if (theme === 'structured') {
        // より整然としたエフェクト
        document.body.style.border = '2px solid var(--primary-color)';
      }
    }

    // ページ読み込み時のテーマ別エフェクト
    function initializeThemeEffects() {
      const body = document.body;
      const currentTheme = body.className.match(/theme-(\w+)/);
      if (!currentTheme) return;

      const theme = currentTheme[1];

      // ボディの初期アニメーション
      body.style.opacity = '0';
      body.style.transform = 'translateY(20px)';
      
      setTimeout(() => {
        body.style.transition = 'all 0.6s ease-out';
        body.style.opacity = '1';
        body.style.transform = 'translateY(0)';
      }, 100);

      // 選択肢の順次表示
      const choiceItems = document.querySelectorAll('.choice-item');
      choiceItems.forEach((item, index) => {
        item.style.opacity = '0';
        item.style.transform = 'translateX(-20px)';
        
        setTimeout(() => {
          item.style.transition = 'all 0.4s ease-out';
          item.style.opacity = '1';
          item.style.transform = 'translateX(0)';
        }, 300 + (index * 100));
      });
    }
  </script>
  
</body>
</html>
